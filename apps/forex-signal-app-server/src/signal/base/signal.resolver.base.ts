/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Signal } from "./Signal";
import { SignalCountArgs } from "./SignalCountArgs";
import { SignalFindManyArgs } from "./SignalFindManyArgs";
import { SignalFindUniqueArgs } from "./SignalFindUniqueArgs";
import { CreateSignalArgs } from "./CreateSignalArgs";
import { UpdateSignalArgs } from "./UpdateSignalArgs";
import { DeleteSignalArgs } from "./DeleteSignalArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SignalService } from "../signal.service";
@graphql.Resolver(() => Signal)
export class SignalResolverBase {
  constructor(protected readonly service: SignalService) {}

  async _signalsMeta(
    @graphql.Args() args: SignalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Signal])
  async signals(@graphql.Args() args: SignalFindManyArgs): Promise<Signal[]> {
    return this.service.signals(args);
  }

  @graphql.Query(() => Signal, { nullable: true })
  async signal(
    @graphql.Args() args: SignalFindUniqueArgs
  ): Promise<Signal | null> {
    const result = await this.service.signal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Signal)
  async createSignal(@graphql.Args() args: CreateSignalArgs): Promise<Signal> {
    return await this.service.createSignal({
      ...args,
      data: {
        ...args.data,

        subscription: args.data.subscription
          ? {
              connect: args.data.subscription,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Signal)
  async updateSignal(
    @graphql.Args() args: UpdateSignalArgs
  ): Promise<Signal | null> {
    try {
      return await this.service.updateSignal({
        ...args,
        data: {
          ...args.data,

          subscription: args.data.subscription
            ? {
                connect: args.data.subscription,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Signal)
  async deleteSignal(
    @graphql.Args() args: DeleteSignalArgs
  ): Promise<Signal | null> {
    try {
      return await this.service.deleteSignal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Subscription, {
    nullable: true,
    name: "subscription",
  })
  async getSubscription(
    @graphql.Parent() parent: Signal
  ): Promise<Subscription | null> {
    const result = await this.service.getSubscription(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
