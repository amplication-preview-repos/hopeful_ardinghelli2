/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Signal as PrismaSignal,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class SignalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SignalCountArgs, "select">): Promise<number> {
    return this.prisma.signal.count(args);
  }

  async signals(args: Prisma.SignalFindManyArgs): Promise<PrismaSignal[]> {
    return this.prisma.signal.findMany(args);
  }
  async signal(
    args: Prisma.SignalFindUniqueArgs
  ): Promise<PrismaSignal | null> {
    return this.prisma.signal.findUnique(args);
  }
  async createSignal(args: Prisma.SignalCreateArgs): Promise<PrismaSignal> {
    return this.prisma.signal.create(args);
  }
  async updateSignal(args: Prisma.SignalUpdateArgs): Promise<PrismaSignal> {
    return this.prisma.signal.update(args);
  }
  async deleteSignal(args: Prisma.SignalDeleteArgs): Promise<PrismaSignal> {
    return this.prisma.signal.delete(args);
  }

  async getSubscription(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.signal
      .findUnique({
        where: { id: parentId },
      })
      .subscription();
  }
}
