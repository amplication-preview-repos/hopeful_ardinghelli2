/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChatGroup as PrismaChatGroup,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class ChatGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatGroup.count(args);
  }

  async chatGroups(
    args: Prisma.ChatGroupFindManyArgs
  ): Promise<PrismaChatGroup[]> {
    return this.prisma.chatGroup.findMany(args);
  }
  async chatGroup(
    args: Prisma.ChatGroupFindUniqueArgs
  ): Promise<PrismaChatGroup | null> {
    return this.prisma.chatGroup.findUnique(args);
  }
  async createChatGroup(
    args: Prisma.ChatGroupCreateArgs
  ): Promise<PrismaChatGroup> {
    return this.prisma.chatGroup.create(args);
  }
  async updateChatGroup(
    args: Prisma.ChatGroupUpdateArgs
  ): Promise<PrismaChatGroup> {
    return this.prisma.chatGroup.update(args);
  }
  async deleteChatGroup(
    args: Prisma.ChatGroupDeleteArgs
  ): Promise<PrismaChatGroup> {
    return this.prisma.chatGroup.delete(args);
  }

  async getSubscription(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.chatGroup
      .findUnique({
        where: { id: parentId },
      })
      .subscription();
  }
}
