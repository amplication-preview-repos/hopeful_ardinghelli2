/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChatGroup } from "./ChatGroup";
import { ChatGroupCountArgs } from "./ChatGroupCountArgs";
import { ChatGroupFindManyArgs } from "./ChatGroupFindManyArgs";
import { ChatGroupFindUniqueArgs } from "./ChatGroupFindUniqueArgs";
import { CreateChatGroupArgs } from "./CreateChatGroupArgs";
import { UpdateChatGroupArgs } from "./UpdateChatGroupArgs";
import { DeleteChatGroupArgs } from "./DeleteChatGroupArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { ChatGroupService } from "../chatGroup.service";
@graphql.Resolver(() => ChatGroup)
export class ChatGroupResolverBase {
  constructor(protected readonly service: ChatGroupService) {}

  async _chatGroupsMeta(
    @graphql.Args() args: ChatGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChatGroup])
  async chatGroups(
    @graphql.Args() args: ChatGroupFindManyArgs
  ): Promise<ChatGroup[]> {
    return this.service.chatGroups(args);
  }

  @graphql.Query(() => ChatGroup, { nullable: true })
  async chatGroup(
    @graphql.Args() args: ChatGroupFindUniqueArgs
  ): Promise<ChatGroup | null> {
    const result = await this.service.chatGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatGroup)
  async createChatGroup(
    @graphql.Args() args: CreateChatGroupArgs
  ): Promise<ChatGroup> {
    return await this.service.createChatGroup({
      ...args,
      data: {
        ...args.data,

        subscription: args.data.subscription
          ? {
              connect: args.data.subscription,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ChatGroup)
  async updateChatGroup(
    @graphql.Args() args: UpdateChatGroupArgs
  ): Promise<ChatGroup | null> {
    try {
      return await this.service.updateChatGroup({
        ...args,
        data: {
          ...args.data,

          subscription: args.data.subscription
            ? {
                connect: args.data.subscription,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatGroup)
  async deleteChatGroup(
    @graphql.Args() args: DeleteChatGroupArgs
  ): Promise<ChatGroup | null> {
    try {
      return await this.service.deleteChatGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Subscription, {
    nullable: true,
    name: "subscription",
  })
  async getSubscription(
    @graphql.Parent() parent: ChatGroup
  ): Promise<Subscription | null> {
    const result = await this.service.getSubscription(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
