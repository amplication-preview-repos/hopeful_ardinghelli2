/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChatGroupService } from "../chatGroup.service";
import { ChatGroupCreateInput } from "./ChatGroupCreateInput";
import { ChatGroup } from "./ChatGroup";
import { ChatGroupFindManyArgs } from "./ChatGroupFindManyArgs";
import { ChatGroupWhereUniqueInput } from "./ChatGroupWhereUniqueInput";
import { ChatGroupUpdateInput } from "./ChatGroupUpdateInput";

export class ChatGroupControllerBase {
  constructor(protected readonly service: ChatGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatGroup })
  async createChatGroup(
    @common.Body() data: ChatGroupCreateInput
  ): Promise<ChatGroup> {
    return await this.service.createChatGroup({
      data: {
        ...data,

        subscription: data.subscription
          ? {
              connect: data.subscription,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatGroup] })
  @ApiNestedQuery(ChatGroupFindManyArgs)
  async chatGroups(@common.Req() request: Request): Promise<ChatGroup[]> {
    const args = plainToClass(ChatGroupFindManyArgs, request.query);
    return this.service.chatGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chatGroup(
    @common.Param() params: ChatGroupWhereUniqueInput
  ): Promise<ChatGroup | null> {
    const result = await this.service.chatGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,

        subscription: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChatGroup(
    @common.Param() params: ChatGroupWhereUniqueInput,
    @common.Body() data: ChatGroupUpdateInput
  ): Promise<ChatGroup | null> {
    try {
      return await this.service.updateChatGroup({
        where: params,
        data: {
          ...data,

          subscription: data.subscription
            ? {
                connect: data.subscription,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,

          subscription: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChatGroup(
    @common.Param() params: ChatGroupWhereUniqueInput
  ): Promise<ChatGroup | null> {
    try {
      return await this.service.deleteChatGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,

          subscription: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
