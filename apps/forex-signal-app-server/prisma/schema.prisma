datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ChatGroup {
  createdAt      DateTime      @default(now())
  id             String        @id @default(cuid())
  name           String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  updatedAt      DateTime      @updatedAt
}

model Subscription {
  chatGroups ChatGroup[]
  courses    Course[]
  createdAt  DateTime    @default(now())
  id         String      @id @default(cuid())
  name       String?
  signals    Signal[]
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
}

model Article {
  content   String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  title     String?
  updatedAt DateTime @updatedAt
}

model Course {
  content        String?
  createdAt      DateTime      @default(now())
  id             String        @id @default(cuid())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  title          String?
  updatedAt      DateTime      @updatedAt
}

model Signal {
  createdAt      DateTime             @default(now())
  id             String               @id @default(cuid())
  subscription   Subscription?        @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  typeField      EnumSignalTypeField?
  updatedAt      DateTime             @updatedAt
}

model User {
  createdAt     DateTime       @default(now())
  email         String?        @unique
  firstName     String?
  id            String         @id @default(cuid())
  lastName      String?
  password      String
  roles         Json
  subscriptions Subscription[]
  updatedAt     DateTime       @updatedAt
  username      String         @unique
}

enum EnumSignalTypeField {
  Option1
}
